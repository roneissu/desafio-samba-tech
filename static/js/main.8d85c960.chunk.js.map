{"version":3,"sources":["components/Header/Header.js","components/CharacterList/Character/Character.js","components/CharacterList/CharacterList.js","components/Paginator/Paginator.js","pages/Main/Main.js","serviceWorker.js","index.js","App.js"],"names":["Header","callback","useState","filterValue","setFilterValue","className","src","alt","type","onChange","event","target","value","Character","params","data","setData","useEffect","img","status","name","birthday","occupation","CharacterList","listCharacter","filter","element","toLowerCase","includes","map","key","char_id","Paginator","pagesNumber","pageSel","pages","setPages","pagesArray","i","push","onClick","id","baseUrl","configPage","Characters","pagesTotal","setPagesTotal","pageNumber","setPageNumber","setListCharacter","fetch","then","response","json","length","catch","error","console","log","offset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0VAGe,SAASA,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAAY,EAEHC,mBAAS,IAFN,mBAElCC,EAFkC,KAErBC,EAFqB,KASzC,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,+BAA+BC,IAAI,eAAeF,UAAU,UAErE,2BAAOG,KAAK,OAAOC,SAT3B,SAAsBC,GAClBN,EAAeM,EAAMC,OAAOC,OAC5BX,EAASE,IAOwCS,MAAQT,K,YCblD,SAASU,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAAU,EAElBZ,mBAAS,IAFS,mBAEnCa,EAFmC,KAE7BC,EAF6B,KAW1C,OAPAC,oBAAU,WAIND,EAAQF,IACT,CAACA,IAGA,oCACI,yBAAKT,UAAU,aACX,yBAAKC,IAAMS,EAAKG,IAAMX,IAAI,GAAGF,UAAU,WAG3C,yBAAKA,UAAY,oBAAsBU,EAAKI,QACtCJ,EAAKI,QAGX,yBAAKd,UAAU,kBACX,yBAAKA,UAAU,aACTU,EAAKK,MAEX,yBAAKf,UAAU,iBACTU,EAAKM,UAEX,yBAAKhB,UAAU,mBACTU,EAAKO,cC3BZ,SAASC,EAAT,GAAwD,IAA/BC,EAA8B,EAA9BA,cAAerB,EAAe,EAAfA,YACnD,OACI,oCACI,0BAAME,UAAU,cAAhB,eACA,wBAAIA,UAAU,aACNmB,EACKC,OAAO,SAACC,GAAD,OACJA,EAAQN,KAAKO,cAAcC,SAASzB,EAAYwB,iBAEnDE,IAAI,SAACH,GAAD,OACD,yBAAKI,IAAMJ,EAAQK,QAAU1B,UAAU,aACnC,kBAAC,EAAD,CAAWS,OAASY,S,MCbrC,SAASM,EAAT,GAAwD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,QAASjC,EAAY,EAAZA,SAAY,EACxCC,mBAAS,IAD+B,mBAC3DiC,EAD2D,KACpDC,EADoD,KAelE,OAZAnB,oBAAU,WAEN,IADA,IAAIoB,EAAa,GACTC,EAAI,EAAGA,GAAKL,EAAaK,IAC7BD,EAAWE,KAAKD,GAEpBF,EAASC,IACV,CAACJ,IAOA,yBAAK5B,UAAU,uBACT8B,EACGN,IAAI,SAACH,GAAD,OACD,4BAAQI,IAAMJ,EAAUc,QAAU,kBAAMvC,EAASyB,KAC7C,0BAAMrB,UAAY,oBATdoC,EASkDf,EAR9DQ,IAAYO,EAAM,iBAAmB,KASvBf,IAV1B,IAAwBe,KCL5B,IAAMC,EAAU,sCACVC,EAAa,GAEJ,SAASC,IAAc,IAAD,EAEG1C,mBAAS,GAFZ,mBAE1B2C,EAF0B,KAEdC,EAFc,OAGG5C,mBAAS,GAHZ,mBAG1B6C,EAH0B,KAGdC,EAHc,OAIK9C,mBAAS,IAJd,mBAI1BC,EAJ0B,KAIbC,EAJa,OAKSF,mBAAS,IALlB,mBAK1BsB,EAL0B,KAKXyB,EALW,KA6BjC,OAtBAhC,oBAAU,WASNiC,MAAMR,EAAO,cACRS,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACC,GAAD,OAAcN,EAAc,EAAIM,EAASE,OAAOX,KACrDY,MAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,oBAAsBF,MAVzD,IAEHvC,oBAAU,WAWV,IAA0C0C,KAVEZ,EAAW,GAAGJ,EAWtDO,MAAMR,EAAO,2BAXcC,EAWd,mBAAuCgB,IAC/CR,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACC,GAAD,OAAcH,EAAiBG,KACpCG,MAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,oBAAsBF,MAbzD,CAACT,IAiBA,yBAAK1C,UAAU,QACX,kBAAC,EAAD,CAAQJ,SAAWG,IACnB,kBAAC,EAAD,CAAeoB,cAAgBA,EAAgBrB,YAAcA,IAC7D,kBAAC,EAAD,CAAW8B,YAAcY,EAAaX,QAAUa,EAAa9C,SAAW+C,KCjChEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCFD,WACX,OACI,kBAAC,EAAD,ODAQ,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.8d85c960.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Header.css';\n\nexport default function Header({ callback }) {\n\n    const [filterValue, setFilterValue] = useState('');\n\n    function handleChange(event) {\n        setFilterValue(event.target.value);\n        callback(filterValue);\n    };\n\n    return (\n        <div className='head-container'>\n            <img src='assets/breaking_bad_logo.png' alt='Breaking Bad' className='title'/>\n            {/* <span className='title'>Header</span> */}\n            <input type='text' onChange={ handleChange } value={ filterValue }></input>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport './Character.css';\n\nexport default function Character({ params }) {\n\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        // fetch('https://www.breakingbadapi.com/api/characters/1')\n        //     .then(res => res.json()[0])\n        //     .then(res => setData(res))\n        setData(params);\n    }, [params]);\n\n    return (\n        <>\n            <div className='char-card'>\n                <img src={ data.img } alt='' className='image' />\n            </div>\n\n            <div className={ 'status-container ' + data.status }>\n                { data.status }\n            </div>\n\n            <div className='info-container'>\n                <div className='info-name'>\n                    { data.name }\n                </div>\n                <div className='info-birthday'>\n                    { data.birthday }\n                </div>\n                <div className='info-occupation'>\n                    { data.occupation }\n                </div>\n            </div>\n        </>\n    );\n}","import React from 'react';\nimport './CharacterList.css';\n\nimport Character from './Character/Character';\n\nexport default function CharacterList({ listCharacter, filterValue }) {\n    return (\n        <>\n            <span className='char-title'>Personagens</span>\n            <ul className='char-list'>\n                {   listCharacter\n                        .filter((element) => (\n                            element.name.toLowerCase().includes(filterValue.toLowerCase())\n                        ))\n                        .map((element) => \n                            <div key={ element.char_id } className='char-item'>\n                                <Character params={ element } />\n                            </div>\n                        )\n                }\n            </ul>\n        </>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport './Paginator.css';\n\nexport default function Paginator({ pagesNumber, pageSel, callback }) {\n    const [pages, setPages] = useState([]);\n\n    useEffect(() => {\n        let pagesArray = [];\n        for(let i = 1; i <= pagesNumber; i++) {\n            pagesArray.push(i);\n        }\n        setPages(pagesArray);\n    }, [pagesNumber]);\n\n    function pageIsSelected(id) {\n        return (pageSel === id) ? ' selected-page' : '';\n    }\n\n    return (\n        <div className='paginator-container'>\n            { pages\n                .map((element) => \n                    <button key={ element } onClick={ () => callback(element) }>\n                        <span className={ 'paginator-number' + pageIsSelected(element) }>\n                            { element }\n                        </span>\n                    </button>\n                )\n            }\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport './Main.css';\n\n// import CharacterService from '../../services/CharacterService';\n\nimport Header from '../../components/Header/Header';\nimport CharacterList from '../../components/CharacterList/CharacterList';\nimport Paginator from '../../components/Paginator/Paginator';\n\nconst baseUrl = 'https://www.breakingbadapi.com/api/';\nconst configPage = 10;\n\nexport default function Characters() {\n\n    const [pagesTotal, setPagesTotal] = useState(0);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [filterValue, setFilterValue] = useState('');\n    const [listCharacter, setListCharacter] = useState([]);\n\n    useEffect(() => {\n        getNumberTotalOfPages();\n    }, []);\n\n    useEffect(() => {\n        getPaginatedCharacterList( configPage, (pageNumber-1)*configPage );\n    }, [pageNumber]);\n\n    function getNumberTotalOfPages() {\n        fetch(baseUrl + `characters`)\n            .then((response) => response.json())\n            .then((response) => setPagesTotal(1 + response.length/configPage))\n            .catch((error) => console.log('An error ocourred' + error))\n    }\n\n    function getPaginatedCharacterList(limit, offset) {\n        fetch(baseUrl + `characters?limit=${limit}&offset=${offset}`)\n            .then((response) => response.json())\n            .then((response) => setListCharacter(response))\n            .catch((error) => console.log('An error ocourred' + error))\n    }\n\n    return (\n        <div className='page'>\n            <Header callback={ setFilterValue } />\n            <CharacterList listCharacter={ listCharacter } filterValue={ filterValue } />\n            <Paginator pagesNumber={ pagesTotal } pageSel={ pageNumber } callback={ setPageNumber } />\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport PageMain from './pages/Main/Main';\n\nexport default function App() {\n    return (\n        <PageMain />\n    );\n}\n"],"sourceRoot":""}